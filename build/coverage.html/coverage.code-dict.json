{"/home/travis/build/npmtest/node-npmtest-node-statsd/test.js":"/* istanbul instrument in package npmtest_node_statsd */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-node-statsd/lib.npmtest_node_statsd.js":"/* istanbul instrument in package npmtest_node_statsd */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_node_statsd = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_node_statsd = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-node-statsd/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-node-statsd && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_node_statsd */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_node_statsd\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_node_statsd.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_node_statsd.rollup.js'] =\n            local.assetsDict['/assets.npmtest_node_statsd.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_node_statsd.__dirname + '/lib.npmtest_node_statsd.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-node-statsd/node_modules/node-statsd/index.js":"module.exports = require('./lib/statsd');","/home/travis/build/npmtest/node-npmtest-node-statsd/node_modules/node-statsd/lib/statsd.js":"var dgram = require('dgram'),\n    dns   = require('dns');\n\n/**\n * The UDP Client for StatsD\n * @param options\n *   @option host        {String}  The host to connect to default: localhost\n *   @option port        {String|Integer} The port to connect to default: 8125\n *   @option prefix      {String}  An optional prefix to assign to each stat name sent\n *   @option suffix      {String}  An optional suffix to assign to each stat name sent\n *   @option globalize   {boolean} An optional boolean to add \"statsd\" as an object in the global namespace\n *   @option cacheDns    {boolean} An optional option to only lookup the hostname -> ip address once\n *   @option mock        {boolean} An optional boolean indicating this Client is a mock object, no stats are sent.\n *   @option global_tags {Array=} Optional tags that will be added to every metric\n * @constructor\n */\nvar Client = function (host, port, prefix, suffix, globalize, cacheDns, mock, global_tags) {\n  var options = host || {},\n         self = this;\n\n  if(arguments.length > 1 || typeof(host) === 'string'){\n    options = {\n      host        : host,\n      port        : port,\n      prefix      : prefix,\n      suffix      : suffix,\n      globalize   : globalize,\n      cacheDns    : cacheDns,\n      mock        : mock === true,\n      global_tags : global_tags\n    };\n  }\n\n  this.host        = options.host || 'localhost';\n  this.port        = options.port || 8125;\n  this.prefix      = options.prefix || '';\n  this.suffix      = options.suffix || '';\n  this.socket      = dgram.createSocket('udp4');\n  this.mock        = options.mock;\n  this.global_tags = options.global_tags || [];\n\n  if(options.cacheDns === true){\n    dns.lookup(options.host, function(err, address, family){\n      if(err == null){\n        self.host = address;\n      }\n    });\n  }\n\n  if(options.globalize){\n    global.statsd = this;\n  }\n};\n\n/**\n * Represents the timing stat\n * @param stat {String|Array} The stat(s) to send\n * @param time {Number} The time in milliseconds to send\n * @param sampleRate {Number=} The Number of times to sample (0 to 1). Optional.\n * @param tags {Array=} The Array of tags to add to metrics. Optional.\n * @param callback {Function=} Callback when message is done being delivered. Optional.\n */\nClient.prototype.timing = function (stat, time, sampleRate, tags, callback) {\n  this.sendAll(stat, time, 'ms', sampleRate, tags, callback);\n};\n\n/**\n * Increments a stat by a specified amount\n * @param stat {String|Array} The stat(s) to send\n * @param value The value to send\n * @param sampleRate {Number=} The Number of times to sample (0 to 1). Optional.\n * @param tags {Array=} The Array of tags to add to metrics. Optional.\n * @param callback {Function=} Callback when message is done being delivered. Optional.\n */\nClient.prototype.increment = function (stat, value, sampleRate, tags, callback) {\n  this.sendAll(stat, value || 1, 'c', sampleRate, tags, callback);\n};\n\n/**\n * Decrements a stat by a specified amount\n * @param stat {String|Array} The stat(s) to send\n * @param value The value to send\n * @param sampleRate {Number=} The Number of times to sample (0 to 1). Optional.\n * @param tags {Array=} The Array of tags to add to metrics. Optional.\n * @param callback {Function=} Callback when message is done being delivered. Optional.\n */\nClient.prototype.decrement = function (stat, value, sampleRate, tags, callback) {\n  this.sendAll(stat, -value || -1, 'c', sampleRate, tags, callback);\n};\n\n/**\n * Represents the histogram stat\n * @param stat {String|Array} The stat(s) to send\n * @param value The value to send\n * @param sampleRate {Number=} The Number of times to sample (0 to 1). Optional.\n * @param tags {Array=} The Array of tags to add to metrics. Optional.\n * @param callback {Function=} Callback when message is done being delivered. Optional.\n */\nClient.prototype.histogram = function (stat, value, sampleRate, tags, callback) {\n  this.sendAll(stat, value, 'h', sampleRate, tags, callback);\n};\n\n\n/**\n * Gauges a stat by a specified amount\n * @param stat {String|Array} The stat(s) to send\n * @param value The value to send\n * @param sampleRate {Number=} The Number of times to sample (0 to 1). Optional.\n * @param tags {Array=} The Array of tags to add to metrics. Optional.\n * @param callback {Function=} Callback when message is done being delivered. Optional.\n */\nClient.prototype.gauge = function (stat, value, sampleRate, tags, callback) {\n  this.sendAll(stat, value, 'g', sampleRate, tags, callback);\n};\n\n/**\n * Counts unique values by a specified amount\n * @param stat {String|Array} The stat(s) to send\n * @param value The value to send\n * @param sampleRate {Number=} The Number of times to sample (0 to 1). Optional.\n * @param tags {Array=} The Array of tags to add to metrics. Optional.\n * @param callback {Function=} Callback when message is done being delivered. Optional.\n */\nClient.prototype.unique =\nClient.prototype.set = function (stat, value, sampleRate, tags, callback) {\n  this.sendAll(stat, value, 's', sampleRate, tags, callback);\n};\n\n/**\n * Checks if stats is an array and sends all stats calling back once all have sent\n * @param stat {String|Array} The stat(s) to send\n * @param value The value to send\n * @param sampleRate {Number=} The Number of times to sample (0 to 1). Optional.\n * @param tags {Array=} The Array of tags to add to metrics. Optional.\n * @param callback {Function=} Callback when message is done being delivered. Optional.\n */\nClient.prototype.sendAll = function(stat, value, type, sampleRate, tags, callback){\n  var completed = 0,\n      calledback = false,\n      sentBytes = 0,\n      self = this;\n\n  if(sampleRate && typeof sampleRate !== 'number'){\n    callback = tags;\n    tags = sampleRate;\n    sampleRate = undefined;\n  }\n\n  if(tags && !Array.isArray(tags)){\n    callback = tags;\n    tags = undefined;\n  }\n\n  /**\n   * Gets called once for each callback, when all callbacks return we will\n   * call back from the function\n   * @private\n   */\n  function onSend(error, bytes){\n    completed += 1;\n    if(calledback || typeof callback !== 'function'){\n      return;\n    }\n\n    if(error){\n      calledback = true;\n      return callback(error);\n    }\n\n    sentBytes += bytes;\n    if(completed === stat.length){\n      callback(null, sentBytes);\n    }\n  }\n\n  if(Array.isArray(stat)){\n    stat.forEach(function(item){\n      self.send(item, value, type, sampleRate, tags, onSend);\n    });\n  } else {\n    this.send(stat, value, type, sampleRate, tags, callback);\n  }\n};\n\n/**\n * Sends a stat across the wire\n * @param stat {String|Array} The stat(s) to send\n * @param value The value to send\n * @param type {String} The type of message to send to statsd\n * @param sampleRate {Number} The Number of times to sample (0 to 1)\n * @param tags {Array} The Array of tags to add to metrics\n * @param callback {Function=} Callback when message is done being delivered. Optional.\n */\nClient.prototype.send = function (stat, value, type, sampleRate, tags, callback) {\n  var message = this.prefix + stat + this.suffix + ':' + value + '|' + type,\n      buf,\n      merged_tags = [];\n\n  if(sampleRate && sampleRate < 1){\n    if(Math.random() < sampleRate){\n      message += '|@' + sampleRate;\n    } else {\n      //don't want to send if we don't meet the sample ratio\n      return;\n    }\n  }\n\n  if(tags && Array.isArray(tags)){\n    merged_tags = merged_tags.concat(tags);\n  }\n  if(this.global_tags && Array.isArray(this.global_tags)){\n    merged_tags = merged_tags.concat(this.global_tags);\n  }\n  if(merged_tags.length > 0){\n    message += '|#' + merged_tags.join(',');\n  }\n\n  // Only send this stat if we're not a mock Client.\n  if(!this.mock) {\n    buf = new Buffer(message);\n    this.socket.send(buf, 0, buf.length, this.port, this.host, callback);\n  } else {\n    if(typeof callback === 'function'){\n      callback(null, 0);\n    }\n  }\n};\n\n/**\n * Close the underlying socket and stop listening for data on it.\n */\nClient.prototype.close = function(){\n    this.socket.close();\n}\n\nexports = module.exports = Client;\nexports.StatsD = Client;\n"}